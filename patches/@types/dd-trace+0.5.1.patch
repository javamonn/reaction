patch-package
--- a/node_modules/@types/dd-trace/index.d.ts
+++ b/node_modules/@types/dd-trace/index.d.ts
@@ -1,11 +1,15 @@
-// Type definitions for dd-trace-js 0.5
+// Type definitions for dd-trace-js 0.6
 // Project: https://github.com/DataDog/dd-trace-js
 // Definitions by: Colin Bradley <https://github.com/ColinBradley>
 //                 Eloy Dur√°n <https://github.com/alloy>
 // Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 2.1
+
+// Prettified with:
+// $ prettier --parser typescript --tab-width 4 --semi --trailing-comma es5 --write --print-width 120 types/dd-trace/{,*}/*.ts*
 
 import { Tracer, Span, SpanContext } from "opentracing";
-import DatadogSpanContext = require('./src/opentracing/span_context');
+import DatadogSpanContext = require("./src/opentracing/span_context");
 
 declare var trace: TraceProxy;
 export = trace;
@@ -21,7 +25,7 @@ declare class TraceProxy extends Tracer {
      * @param plugin The name of a built-in plugin.
      * @param config Configuration options.
      */
-    use(plugin: string, config: PluginOptions): this;
+    use<P extends Plugin>(plugin: P, config: PluginConfiguration[P]): this;
 
     /**
      * Initiate a trace and creates a new span.
@@ -103,25 +107,12 @@ interface TracerOptions {
      * see https://datadog.github.io/dd-trace-js/#custom-logging__anchor
      */
     logger?: {
-        debug: (message: string) => void
-        error: (err: Error) => void
+        debug: (message: string) => void;
+        error: (err: Error) => void;
     };
 }
 
-interface ExperimentalOptions {
-    /**
-     * Whether to use Node's experimental async hooks.
-     * @default false
-     */
-    asyncHooks?: boolean;
-}
-
-interface PluginOptions {
-    /**
-     * The service name to be used for this plugin.
-     */
-    service: string;
-}
+interface ExperimentalOptions {}
 
 interface TraceOptions {
     /**
@@ -185,3 +176,65 @@ declare class Scope {
      */
     close(): void;
 }
+
+type Plugin =
+    | "amqp10"
+    | "amqplib"
+    | "elasticsearch"
+    | "express"
+    | "graphql"
+    | "http"
+    | "mongodb-core"
+    | "mysql"
+    | "mysql2"
+    | "pg"
+    | "redis";
+
+interface BasePluginOptions {
+    /**
+     * The service name to be used for this plugin.
+     */
+    service?: string;
+}
+
+interface ExpressPluginOptions extends BasePluginOptions {
+    /**
+     * An array of headers to include in the span metadata.
+     */
+    headers?: string[];
+
+    /**
+     * Callback function to determine if there was an error. It should take a
+     * status code as its only parameter and return `true` for success or `false`
+     * for errors.
+     */
+    validateStatus?: (code: number) => boolean;
+}
+
+interface GraphQLPluginOptions extends BasePluginOptions {
+    /**
+     * The maximum depth of fields/resolvers to instrument. Set to `0` to only
+     * instrument the operation or to -1 to instrument all fields/resolvers.
+     */
+    depth?: number;
+
+    /**
+     * A callback to enable recording of variables. By default, no variables are
+     * recorded. For example, using `variables => variables` would record all
+     * variables.
+     */
+    variables?: <T extends { [key: string]: any }>(variables: T) => Partial<T>;
+}
+
+interface HTTPPluginOptions extends BasePluginOptions {
+    /**
+     * Use the remote endpoint host as the service name instead of the default.
+     */
+    splitByDomain?: boolean;
+}
+
+type PluginConfiguration = { [K in Plugin]: BasePluginOptions } & {
+    express: ExpressPluginOptions;
+    graphql: GraphQLPluginOptions;
+    http: HTTPPluginOptions;
+};
